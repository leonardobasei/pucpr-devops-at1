name: Discord Notifications

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, closed, merged]
    branches: [ main ]
  workflow_run:
    workflows: ["CI/CD Pipeline", "Code Quality", "Security"]
    types: [completed]
    branches: [ main ]

jobs:
  notify:
    name: Send Discord Notification
    runs-on: ubuntu-latest
    if: always() # Executa mesmo se outros jobs falharem
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set notification content
      id: notification
      run: |
        # Determinar o tipo de evento e status
        if [ "${{ github.event_name }}" = "push" ]; then
          EVENT_TYPE="üöÄ **Commit no Main**"
          STATUS_EMOJI="‚úÖ"
          STATUS_TEXT="Commit realizado com sucesso"
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          if [ "${{ github.event.action }}" = "opened" ]; then
            EVENT_TYPE="üìù **Pull Request Aberto**"
            STATUS_EMOJI="üÜï"
            STATUS_TEXT="Nova PR criada"
          elif [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            EVENT_TYPE="üîÄ **Pull Request Merged**"
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="PR foi mergeada com sucesso"
          elif [ "${{ github.event.action }}" = "closed" ]; then
            EVENT_TYPE="‚ùå **Pull Request Fechada**"
            STATUS_EMOJI="‚ùå"
            STATUS_TEXT="PR foi fechada sem merge"
          fi
        elif [ "${{ github.event_name }}" = "workflow_run" ]; then
          if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            EVENT_TYPE="üîÑ **Workflow Executado**"
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="Workflow executado com sucesso"
          elif [ "${{ github.event.workflow_run.conclusion }}" = "failure" ]; then
            EVENT_TYPE="üîÑ **Workflow Falhou**"
            STATUS_EMOJI="‚ùå"
            STATUS_TEXT="Workflow falhou"
          else
            EVENT_TYPE="üîÑ **Workflow Executado**"
            STATUS_EMOJI="‚ö†Ô∏è"
            STATUS_TEXT="Workflow executado com status: ${{ github.event.workflow_run.conclusion }}"
          fi
        fi
        
        # Criar mensagem formatada
        cat << EOF > notification.json
        {
          "embeds": [
            {
              "title": "${EVENT_TYPE}",
              "description": "${STATUS_EMOJI} ${STATUS_TEXT}",
              "color": ${{ github.event_name == 'push' && '65280' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && '65280') || (github.event.workflow_run.conclusion == 'success' && '65280') || '16711680' }},
              "fields": [
                {
                  "name": "üìÅ Reposit√≥rio",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "üåø Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "üë§ Autor",
                  "value": "${{ github.actor }}",
                  "inline": true
                },
                {
                  "name": "üîó Commit",
                  "value": "[${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})",
                  "inline": false
                },
                {
                  "name": "üìù Mensagem do Commit",
                  "value": "${{ github.event.head_commit.message || github.event.pull_request.title || 'N/A' }}",
                  "inline": false
                }
              ],
              "footer": {
                "text": "GitHub Actions ‚Ä¢ ${{ github.workflow }}",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            }
          ]
        }
        EOF
        
        echo "notification_content=$(cat notification.json)" >> $GITHUB_OUTPUT
    
    - name: Send Discord notification
      if: env.DISCORD_WEBHOOK_URL != ''
      run: |
        curl -H "Content-Type: application/json" \
             -X POST \
             -d @notification.json \
             ${{ secrets.DISCORD_WEBHOOK_URL }}
    
    - name: Fallback notification (if webhook not configured)
      if: env.DISCORD_WEBHOOK_URL == ''
      run: |
        echo "‚ö†Ô∏è DISCORD_WEBHOOK_URL n√£o configurado!"
        echo "Para configurar:"
        echo "1. V√° para Settings > Secrets and variables > Actions"
        echo "2. Adicione uma nova secret chamada 'DISCORD_WEBHOOK_URL'"
        echo "3. Cole a URL do webhook do seu servidor Discord"
        echo ""
        echo "Conte√∫do da notifica√ß√£o que seria enviada:"
        cat notification.json
