name: Real-time Discord Alerts

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [opened, closed, merged, reopened]
    branches: [ main ]
  release:
    types: [published, created]
  issues:
    types: [opened, closed, reopened]
  issue_comment:
    types: [created, edited, deleted]

jobs:
  alert:
    name: Send Real-time Alert
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Determine event details
      id: event
      run: |
        # Configurar cores baseadas no tipo de evento
        case "${{ github.event_name }}" in
          "push")
            COLOR="3447003"  # Azul
            EMOJI="üöÄ"
            TITLE="Push realizado"
            ;;
          "pull_request")
            if [ "${{ github.event.action }}" = "opened" ]; then
              COLOR="16776960"  # Amarelo
              EMOJI="üìù"
              TITLE="Nova Pull Request"
            elif [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
              COLOR="65280"  # Verde
              EMOJI="‚úÖ"
              TITLE="Pull Request Mergeada"
            elif [ "${{ github.event.action }}" = "closed" ]; then
              COLOR="16711680"  # Vermelho
              EMOJI="‚ùå"
              TITLE="Pull Request Fechada"
            else
              COLOR="3447003"  # Azul
              EMOJI="üìù"
              TITLE="Pull Request Atualizada"
            fi
            ;;
          "release")
            COLOR="10181046"  # Roxo
            EMOJI="üéâ"
            TITLE="Nova Release"
            ;;
          "issues")
            if [ "${{ github.event.action }}" = "opened" ]; then
              COLOR="16711680"  # Vermelho
              EMOJI="üêõ"
              TITLE="Nova Issue"
            else
              COLOR="65280"  # Verde
              EMOJI="‚úÖ"
              TITLE="Issue Resolvida"
            fi
            ;;
          *)
            COLOR="3447003"  # Azul padr√£o
            EMOJI="üì¢"
            TITLE="Evento GitHub"
            ;;
        esac
        
        echo "color=$COLOR" >> $GITHUB_OUTPUT
        echo "emoji=$EMOJI" >> $GITHUB_OUTPUT
        echo "title=$TITLE" >> $GITHUB_OUTPUT
    
    - name: Create Discord payload
      run: |
        # Criar payload JSON para Discord
        cat > discord_payload.json << EOF
        {
          "username": "GitHub Bot",
          "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
          "embeds": [
            {
              "title": "${{ steps.event.outputs.emoji }} ${{ steps.event.outputs.title }}",
              "description": "**Reposit√≥rio:** ${{ github.repository }}\n**Branch:** ${{ github.ref_name }}\n**Autor:** ${{ github.actor }}",
              "color": ${{ steps.event.outputs.color }},
              "fields": [
                {
                  "name": "üîó Link",
                  "value": "[Ver no GitHub](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})",
                  "inline": true
                },
                {
                  "name": "‚è∞ Timestamp",
                  "value": "$(date -u +'%Y-%m-%d %H:%M:%S UTC')",
                  "inline": true
                }
              ],
              "footer": {
                "text": "GitHub Actions ‚Ä¢ ${{ github.workflow }}",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              }
            }
          ]
        }
        EOF
        
        # Adicionar campo espec√≠fico baseado no tipo de evento
        if [ "${{ github.event_name }}" = "push" ]; then
          jq '.embeds[0].fields += [{"name": "üí¨ Commit Message", "value": "'"${{ github.event.head_commit.message }}"'", "inline": false}]' discord_payload.json > temp.json && mv temp.json discord_payload.json
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          jq '.embeds[0].fields += [{"name": "üìù PR Title", "value": "'"${{ github.event.pull_request.title }}"'", "inline": false}]' discord_payload.json > temp.json && mv temp.json discord_payload.json
        elif [ "${{ github.event_name }}" = "issues" ]; then
          jq '.embeds[0].fields += [{"name": "üêõ Issue Title", "value": "'"${{ github.event.issue.title }}"'", "inline": false}]' discord_payload.json > temp.json && mv temp.json discord_payload.json
        fi
    
    - name: Send to Discord
      if: env.DISCORD_WEBHOOK_URL != ''
      run: |
        curl -X POST \
             -H "Content-Type: application/json" \
             -d @discord_payload.json \
             ${{ secrets.DISCORD_WEBHOOK_URL }}
        echo "‚úÖ Notifica√ß√£o enviada para o Discord!"
    
    - name: Debug (if webhook not configured)
      if: env.DISCORD_WEBHOOK_URL == ''
      run: |
        echo "‚ö†Ô∏è DISCORD_WEBHOOK_URL n√£o configurado!"
        echo "Payload que seria enviado:"
        cat discord_payload.json
